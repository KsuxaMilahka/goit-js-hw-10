{"version":3,"file":"commonHelpers.js","sources":["../src/img/alert-icon.svg","../src/js/1-timer.js"],"sourcesContent":["export default \"__VITE_ASSET__5e15ff8a__\"","\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport imageUrl from '../img/alert-icon.svg'\n\nconst refs = {\n  input: document.querySelector('#datetime-picker'),\n  startBtn: document.querySelector('[data-start]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\nlet timerId = null;\nlet userSelectedDate = null;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        if (userSelectedDate < new Date()) {\n            refs.startBtn.setAttribute('disabled', '');\n            refs.startBtn.classList.remove('right-date');\n                   iziToast.error({\n                       message: 'Please choose a date in the future',\n                       backgroundColor: '#ef4040',\n                       messageColor: '#fff',\n                       messageSize: '16',\n                       imageWidth: 302,\n                       close: true,\n                       closeOnEscape: true,\n                       closeOnClick: true,\n                       progressBar: true,\n                       progressBarColor: '#b51b1b',\n                       transitionIn: 'flipInX',\n                       transitionOut: 'flipOutX',\n                       position: 'topRight',\n                       iconUrl: imageUrl,\n                       iconColor: '#FAFAFB',\n                \n            });\n            \n        } else {\n          refs.startBtn.removeAttribute('disabled', ''),\n            refs.startBtn.classList.add('right-date')\n    };\n    console.log(selectedDates[0]);\n    }\n};\n\nflatpickr(refs.input, options);\n\n\n\nrefs.startBtn.addEventListener('click', () => {\n  refs.startBtn.disabled = true;\n  refs.input.disabled = false;\n  startTimer();\n});\n\nfunction startTimer() {\n  timerId = setInterval(() => {\n        const currentTime = new Date();\n        const timeDifference = userSelectedDate - currentTime;\n\n        if (timeDifference <= 0) {\n            clearInterval(timerId);\n            updateTimer(0);\n            iziToast.success({\n                title: 'Complete',\n                message: 'Countdown finished!'\n            });\n            refs.input.disabled = false;\n            return;\n        }\n\n        updateTimer(timeDifference);\n    }, 1000);\n};\n\nfunction updateTimer(ms) {\n    const time = convertMs(ms);\n    refs.days.textContent = addLeadingZero(time.days);\n    refs.hours.textContent = addLeadingZero(time.hours);\n    refs.minutes.textContent = addLeadingZero(time.minutes);\n    refs.seconds.textContent = addLeadingZero(time.seconds);\n};\n\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n"],"names":["imageUrl","refs","timerId","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","timeDifference","updateTimer","ms","time","convertMs","addLeadingZero","value","days","hours","minutes","seconds"],"mappings":"0IAAA,MAAeA,EAAA,gDCSTC,EAAO,CACX,MAAO,SAAS,cAAc,kBAAkB,EAChD,SAAU,SAAS,cAAc,cAAc,EAC/C,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EACA,IAAIC,EAAU,KACVC,EAAmB,KACvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,IAAI,MACvBF,EAAK,SAAS,aAAa,WAAY,EAAE,EACzCA,EAAK,SAAS,UAAU,OAAO,YAAY,EACpCK,EAAS,MAAM,CACX,QAAS,qCACT,gBAAiB,UACjB,aAAc,OACd,YAAa,KACb,WAAY,IACZ,MAAO,GACP,cAAe,GACf,aAAc,GACd,YAAa,GACb,iBAAkB,UAClB,aAAc,UACd,cAAe,WACf,SAAU,WACV,QAASN,EACT,UAAW,SAElC,CAAa,IAGHC,EAAK,SAAS,gBAAgB,WAAY,EAAE,EAC1CA,EAAK,SAAS,UAAU,IAAI,YAAY,GAEhD,QAAQ,IAAII,EAAc,CAAC,CAAC,CAC3B,CACL,EAEAE,EAAUN,EAAK,MAAOG,CAAO,EAI7BH,EAAK,SAAS,iBAAiB,QAAS,IAAM,CAC5CA,EAAK,SAAS,SAAW,GACzBA,EAAK,MAAM,SAAW,GACtBO,GACF,CAAC,EAED,SAASA,GAAa,CACpBN,EAAU,YAAY,IAAM,CAEtB,MAAMO,EAAiBN,EADH,IAAI,KAGxB,GAAIM,GAAkB,EAAG,CACrB,cAAcP,CAAO,EACrBQ,EAAY,CAAC,EACbJ,EAAS,QAAQ,CACb,MAAO,WACP,QAAS,qBACzB,CAAa,EACDL,EAAK,MAAM,SAAW,GACtB,MACH,CAEDS,EAAYD,CAAc,CAC7B,EAAE,GAAI,CACX,CAEA,SAASC,EAAYC,EAAI,CACrB,MAAMC,EAAOC,EAAUF,CAAE,EACzBV,EAAK,KAAK,YAAca,EAAeF,EAAK,IAAI,EAChDX,EAAK,MAAM,YAAca,EAAeF,EAAK,KAAK,EAClDX,EAAK,QAAQ,YAAca,EAAeF,EAAK,OAAO,EACtDX,EAAK,QAAQ,YAAca,EAAeF,EAAK,OAAO,CAC1D,CAEA,SAASE,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,SAASF,EAAUF,EAAI,CAQrB,MAAMK,EAAO,KAAK,MAAML,EAAK,KAAG,EAE1BM,EAAQ,KAAK,MAAON,EAAK,MAAO,IAAI,EAEpCO,EAAU,KAAK,MAAQP,EAAK,MAAO,KAAQ,GAAM,EAEjDQ,EAAU,KAAK,MAASR,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAK,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,QAAQ,IAAIN,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}